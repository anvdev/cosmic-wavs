#!/bin/bash
# Component validation script
# Runs test utilities to validate a component before building

set -e  # Exit on any error

if [ -z "$1" ]; then
  echo "Usage: $0 <component-directory-name>"
  echo "Example: $0 eth-price-oracle"
  exit 1
fi

COMPONENT_NAME=$1
COMPONENT_DIR="../$COMPONENT_NAME"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Check if component directory exists
if [ ! -d "$COMPONENT_DIR" ]; then
  echo "❌ Error: Component directory $COMPONENT_DIR not found"
  exit 1
fi

echo "🔍 Validating component: $COMPONENT_NAME"

# Run the test utilities first
echo "📝 Running test utilities..."
cd "$SCRIPT_DIR"
cargo test -- --nocapture

# Check for common code issues

# 1. Check for String::from_utf8 usage on ABI data
echo "📝 Checking for common String::from_utf8 misuse..."
if grep -r "String::from_utf8" "$COMPONENT_DIR" | grep -v "test" | grep -v "# CORRECT" > /dev/null; then
  echo "⚠️  Warning: Found String::from_utf8 usage. Ensure it's not being used on ABI-encoded data."
  grep -r "String::from_utf8" "$COMPONENT_DIR" | grep -v "test" | grep -v "# CORRECT"
fi

# 2. Check for proper Clone derivation on API structs
echo "📝 Checking for Clone derivation on structs..."
STRUCTS_WITHOUT_CLONE=$(grep -r "struct" "$COMPONENT_DIR" | grep -v "test" | grep -B 5 "Deserialize" | grep -v "Clone" || true)
if [ ! -z "$STRUCTS_WITHOUT_CLONE" ]; then
  echo "⚠️  Warning: Found structs that might be missing Clone derivation:"
  echo "$STRUCTS_WITHOUT_CLONE"
fi

# 3. Check for map_err on Option types
echo "📝 Checking for map_err on Option types..."
if grep -r "get_eth_chain_config.*map_err" "$COMPONENT_DIR" > /dev/null; then
  echo "❌ Error: Found map_err used on Option types. Use ok_or_else instead."
  grep -r "get_eth_chain_config.*map_err" "$COMPONENT_DIR"
  exit 1
fi

# 4. Check for proper import of essential traits
echo "📝 Checking for essential imports..."
if grep -r "FromStr" "$COMPONENT_DIR"/src/*.rs > /dev/null && ! grep -r "use std::str::FromStr" "$COMPONENT_DIR"/src/*.rs > /dev/null; then
  echo "⚠️  Warning: Found FromStr usage but std::str::FromStr might not be imported"
fi

# 5. Check for proper export! macro usage
echo "📝 Checking for proper component export..."
if ! grep -r "export!" "$COMPONENT_DIR"/src/*.rs > /dev/null; then
  echo "❌ Error: export! macro not found. Components must use export! macro."
  exit 1
fi

# 6. Check for hardcoded API keys
echo "📝 Checking for hardcoded API keys..."
if grep -r "key=.*[0-9a-zA-Z]\\{8,\\}" "$COMPONENT_DIR" --include="*.rs" > /dev/null; then
  echo "❌ Error: Found possible hardcoded API key. Use environment variables instead."
  grep -r "key=.*[0-9a-zA-Z]\\{8,\\}" "$COMPONENT_DIR" --include="*.rs"
  exit 1
fi

# 7. Check for proper workspace dependency usage
echo "📝 Checking for proper workspace dependency usage..."
if grep -r "version = \"[0-9]" "$COMPONENT_DIR/Cargo.toml" > /dev/null; then
  echo "⚠️  Warning: Found direct version numbers in Cargo.toml. Use workspace = true instead."
  grep -r "version = \"[0-9]" "$COMPONENT_DIR/Cargo.toml"
fi

# 8. Check for unused imports
echo "📝 Running comprehensive code quality checks..."
cd "$SCRIPT_DIR/../.."
COMPONENT_NAME_SIMPLE=$(basename "$COMPONENT_DIR")

# Use cargo directly to check for code quality issues
cd "../.."
COMPONENT_NAME_SIMPLE=$(basename "$COMPONENT_DIR")
cargo check -p "$COMPONENT_NAME_SIMPLE" --message-format=json 2>&1 | grep -i "unused|import|cannot find|unresolved|not in scope|no function or associated item named|no method named|multiple applicable items in scope"
CODE_CHECK_STATUS=$?
if [ $CODE_CHECK_STATUS -eq 0 ]; then
  echo "⚠️ Warning: Found potential code quality issues in component."
else
  echo "✅ No code quality issues found"
fi
cd "$SCRIPT_DIR"
cat > /tmp/run_checks.rs << EOF
fn main() {
    let component_path = std::env::args().nth(1).expect("Component path required");
    println!("Running code quality checks for component: {}", component_path);
    match test_utils::code_quality::run_component_code_quality_checks(&component_path) {
        Ok(_) => println!("✅ All code quality checks passed"),
        Err(e) => {
            println!("⚠️ Code quality issues found:");
            println!("{}", e);
            std::process::exit(1);
        }
    }
}
EOF

# Compile and run the check program
rustc -L target/debug/deps -L target/debug -l test_utils /tmp/run_checks.rs -o /tmp/run_checks
if [ $? -ne 0 ]; then
    echo "⚠️ Failed to compile check program. Falling back to basic checks."
    # Basic import check as fallback
    cargo check -p "$COMPONENT_NAME_SIMPLE" --message-format=json 2>&1 | grep -i "unused" | grep -i "import"
    if [ $? -eq 0 ]; then
        echo "⚠️ Warning: Found unused imports in component. These should be removed for code quality."
        cargo check -p "$COMPONENT_NAME_SIMPLE" --message-format=json 2>&1 | grep -i "unused" | grep -i "import"
    else
        echo "✅ No unused imports found"
    fi
else
    # Run the comprehensive check program
    /tmp/run_checks "$COMPONENT_NAME_SIMPLE"
    rm /tmp/run_checks /tmp/run_checks.rs
fi

cd "$SCRIPT_DIR"

echo "✅ Component validation checks complete!"
echo "🚀 Component is ready for building. Run the following command to build:"
echo "    cd ../.. && make wasi-build"